from datetime import datetime
from io import BytesIO
from typing import Optional
from urllib.parse import urlparse, urlunparse

import requests
from flask import current_app

from .models.results import TaskResults
from .models.tasks import Task
from pylon.core.tools import log

from tools import api_tools, rpc_tools, data_tools, MinioClient, VaultClient, MinioClientAdmin


def write_task_run_logs_to_minio_bucket(task_result: TaskResults, task_name: Optional[str] = None, **kwargs):
    if not task_name:
        task_name = Task.query.filter(Task.task_id == task_result.task_id).first().task_name
    loki_settings_url = urlparse(current_app.config["CONTEXT"].settings.get('loki', {}).get('url'))

    # task_result_id = task_result.task_result_id
    # task_id = task.task_id

    if loki_settings_url:
        logs_query = "{" + f'hostname="{task_name}", task_id="{task_result.task_id}", task_result_id="{task_result.task_result_id}"' + "}"
        loki_url = urlunparse((
            loki_settings_url.scheme,
            loki_settings_url.netloc,
            '/loki/api/v1/query_range',
            None,
            'query=' + logs_query,
            None
        ))
        response = requests.get(loki_url)

        if response.ok:
            results = response.json()
            enc = 'utf-8'
            file_output = BytesIO()

            file_output.write(f'Task {task_name} (task_result_id={task_result.task_result_id}) run log:\n'.encode(enc))

            unpacked_values = []
            for i in results['data']['result']:
                for ii in i['values']:
                    unpacked_values.append(ii)
            for unix_ns, log_line in sorted(unpacked_values, key=lambda x: int(x[0])):
                timestamp = datetime.fromtimestamp(int(unix_ns) / 1e9).strftime("%Y-%m-%d %H:%M:%S")
                file_output.write(
                    f'{timestamp}\t{log_line}\n'.encode(enc)
                )
            if task_result.mode == 'default':
                minio_client = MinioClient.from_project_id(task_result.project_id)
            else:
                minio_client = MinioClientAdmin()
            file_output.seek(0)
            bucket_name = str(task_name).replace("_", "").replace(" ", "").lower()
            file_name = f"{task_result.task_result_id}.log"

            if bucket_name not in minio_client.list_bucket():
                minio_client.create_bucket(bucket=bucket_name, bucket_type='autogenerated')
            minio_client.upload_file(bucket_name, file_output, file_name)
        else:
            log.warning('Request to loki failed with status %s', response.status_code)
